>=18.0.0

* The RGW policy parser now rejects unknown principals by default. If you are
  mirroring policies between RGW and AWS, you might want to set ``rgw policy
  reject invalid principals`` to ``false``. This change affects only newly set
  policies, not policies that are already in place.

* RGW's default back end for ``rgw_enable_ops_log`` changed from RADOS to file.
  The default value of ``rgw_ops_log_rados`` is now ``false``, and
  ``rgw_ops_log_file_path`` defaults to
  ``/var/log/ceph/ops-log-$cluster-$name.log``.

* The SPDK back end for BlueStore is now able to connect to an NVMeoF target.
  This is NOT an officially supported feature.

* RGW's PubSub interface now returns boolean fields using bool. Before this

* change, ``/topics/<topic-name>`` returned "stored_secret" and "persistent",
  accompanied by a string reading "true" or "false" (including the quotation
  marks). After this change, these fields are returned without quotes so that
  they can be decoded as boolean values in JSON.  The same applies to the
  ``is_truncated`` field returned by ``/subscriptions/<sub-name>``.

* RGW's response of ``Action=GetTopicAttributes&TopicArn=<topic-arn>`` REST API now
  returns ``HasStoredSecret`` and ``Persistent`` as boolean in the JSON string
  that is encoded in ``Attributes/EndPoint``.

* All boolean fields that were previously rendered as string by the
  ``rgw-admin`` command (when the JSON format was the default) are now
  rendered as boolean. If your scripts/tools rely on the previous behavior,
  update them accordingly. The impacted field names are as follows:

  * absolute
  * add
  * admin
  * appendable
  * bucket_key_enabled
  * delete_marker
  * exists
  * has_bucket_info
  * high_precision_time
  * index
  * is_master
  * is_prefix
  * is_truncated
  * linked
  * log_meta
  * log_op
  * pending_removal
  * read_only
  * retain_head_object
  * rule_exist
  * start_with_full_sync
  * sync_from_all
  * syncstopped
  * system
  * truncated
  * user_stats_sync

* RGW: The beast front end's HTTP-access log line uses a new ``debug_rgw_access``
  configurable. This configurable has the same defaults as ``debug_rgw``, but
  can now be controlled independently.

* RBD: The semantics of compare-and-write C++ API (`Image::compare_and_write`
  and `Image::aio_compare_and_write` methods) now match the semantics of C
  API. Both the compare step and the write step operate only on ``len`` bytes
  even if their associated buffers are larger. The previous behavior of
  comparing up to the size of the compare buffer was prone to subtle breakage
  when straddling a stripe unit's boundary.

* RBD: The compare-and-write operation is no longer limited to 512-byte sectors.
  Given proper alignment, it is now possible to operate on stripe units (4 MB by
  default).

* RBD: New ``rbd_aio_compare_and_writev`` API method to support scatter/gather
  on both compare and write buffers. This method complements existing
  ``rbd_aio_readv`` and ``rbd_aio_writev`` methods.

* The ``AT_NO_ATTR_SYNC`` macro is deprecated and will be removed in the future.
  Use the standard ``AT_STATX_DONT_SYNC`` macro.

* Trimming of PGLog dups is now determined by the size rather than the version.
  This change fixes the PGLog inflation issue in which online (in OSD)
  trimming would jam after a PG split operation. In addition, a new offline
  mechanism has been added: ``ceph-objectstore-tool`` now has a
  ``trim-pg-log-dups`` configuration option that targets situations in which
  an OSD is unable to boot because of inflated dups. In such situations, the
  "You can be hit by THE DUPS BUG" warning will be visible in OSD logs.]
  Relevant tracker: https://tracker.ceph.com/issues/53729

* RBD: The ``rbd device unmap`` command has a new ``--namespace`` option. 
  Support for namespaces was added to RBD in Nautilus 14.2.0 and since that
  release it has been possible to map and unmap images in namespaces by using
  the ``image-spec`` syntax. However, the ``--namespace`` option that is
  available in most other commands was not yet available.

* RGW: Compression is now supported for objects uploaded with server-side 
  encryption. When both compression and encryption are enabled, compression
  is applied before encryption.

* RGW: The PubSub functionality used to store bucket notifications inside Ceph
  has been removed. Do not use it or the PubSub zone anymore. REST operations
  and ``radosgw-admin`` commands for manipulating subscriptions and for
  fetching/acking notifications have also been removed.

  In the event that the endpoint to which the notifications are sent is down 
  or disconnected, use persistent notifications in order to guarantee delivery
  of the notifications. If the system that consumes the notifications needs to
  pull them (rather than having the notifications pushed to the system), use
  an external message bus (for example, RabbitMQ, Kafka) for that purpose.

* RGW: The serialized format of notification and topics has changed. As a 
  result, new/updated topics will be unreadable by legacy RGWs. We recommend
  completing any RGW upgrades before creating or modifying any notification
  topics.

* RBD: The trailing newline in passphrase files (for example, the 
  `<passphrase-file>` argument in the ``rbd encryption format`` command and
  the ``--encryption-passphrase-file`` option in other commands) is no longer
  stripped.

* RBD: Support for layered client-side encryption has been added. Each cloned 
  image can now be encrypted with its own encryption format and passphrase,
  even if they differ from the format and passphrase of the parent image. The
  efficient copy-on-write semantics intrinsic to unformatted (regular) cloned
  images are retained.

* CEPHFS: The ``mds_max_retries_on_remount_failure`` option has been renamed 
  to ``client_max_retries_on_remount_failure`` and moved from ``mds.yaml.in`` 
  to ``mds-client.yaml.in``. This has been done because, since its inception, 
  the option has been used only by the MDS client.

* The ``perf dump`` and ``perf schema`` commands are deprecated in favor of 
  the new ``counter dump`` and ``counter schema`` commands. These new commands
  add support for labeled perf counters and also output existing unlabeled
  perf counters. Some unlabeled perf counters might become labeled in future
  releases and as such would no longer be outputted by the ``perf dump`` and
  ``perf schema`` commands.

* The ``ceph mgr dump`` command now outputs the ``last_failure_osd_epoch`` and
  ``active_clients`` fields at the top level. Previously, these fields were
  output under the ``always_on_modules`` field.

* The ``ceph mgr dump`` command displays new information in the 
  ``active_clients`` array.  Previously, only the address of a module's RADOS
  client was displayed in the array. The array now contains a ``name`` field
  in which the name of the mgr module that registered a RADOS client is
  displayed.


>=17.2.1

* The "BlueStore zero block detection" feature (first introduced to Quincy in
  https://github.com/ceph/ceph/pull/43337) has been turned off by default with
  a new global configuration called ``bluestore_zero_block_detection``. This
  feature, intended for large-scale synthetic testing, does not interact well
  with certain RBD and CephFS features. Any side effects experienced in
  previous Quincy versions would no longer occur, provided that the
  configuration remains set to ``false``.  Relevant tracker:
  https://tracker.ceph.com/issues/55521.

* telemetry: Added new Rook metrics to the 'basic' channel to report Rook's
  version, Kubernetes's version, and node metrics.  To see a sample report,
  run  ``ceph telemetry preview``.  Opt in by running ``ceph telemetry on``.
  For more details, see https://docs.ceph.com/en/latest/mgr/telemetry/.

* OSD: The issue of high CPU utilization during recovery/backfill operations
  has been fixed. For more details, see https://tracker.ceph.com/issues/56530.

>=15.2.17

* OSD: Octopus modified the SnapMapper key format from
  ``<LEGACY_MAPPING_PREFIX><snapid>_<shardid>_<hobject_t::to_str()>``
  to
  ``<MAPPING_PREFIX><pool>_<snapid>_<shardid>_<hobject_t::to_str()>``.
  When this change was introduced, 94ebe0e also contained a conversion that
  introduced a crucial bug. This bug destroyed legacy keys by mapping them to
  ``<MAPPING_PREFIX><poolid>_<snapid>_``
  without the object-unique suffix. The conversion has been fixed in this
  release.
  Relevant tracker: https://tracker.ceph.com/issues/56147
  
* Cephadm can now be configured to carry out CephFS MDS upgrades without
  reducing ``max_mds`` to 1. Previously, Cephadm reduced ``max_mds`` to 1 in 
  order to avoid having two active MDS daemons modifying on-disk structures 
  with new versions, communicating cross-version-incompatible messages, or 
  introducing other potential incompatibilities. Such a condition could be 
  disruptive for large-scale CephFS deployments because the cluster cannot 
  easily reduce active MDS daemons to 1. NOTE: Staggered upgrade of the mons 
  and mgrs might be necessary in order to take advantage of the feature. For 
  details on performing a staggered upgrade, see 
  https://docs.ceph.com/en/quincy/cephadm/upgrade/#staggered-upgrade
  Relevant tracker: https://tracker.ceph.com/issues/55715

* Introduced a new file system flag `refuse_client_session` that can be set using the
`fs set` command. This flag allows blocking any incoming session
request from client(s). This can be useful during some recovery situations
where it's desirable to bring MDS up but have no client workload.
Relevant tracker: https://tracker.ceph.com/issues/57090
  Relevant tracker: https://tracker.ceph.com/issues/5614               

* A new file system flag (``refuse_client_session``) has been introduced. It 
  can be set using the ``fs set`` command. If this flag is set, then any
  incoming session request(s) from client(s) will be blocked. This condition can
  be useful for certain recovery situations in which it is preferable to have no
  client workload while bringing up MDS. Relevant tracker:
  https://tracker.ceph.com/issues/57090

* A new MDSMap field (``max_xattr_size``) has been introduced. It can be set 
  using the ``fs set`` command. This field makes it possible to configure the 
  maximum size that is permitted for a full key-value set that is used for 
  filesystem extended attributes.  It effectively replaces the old per-MDS 
  `max_xattr_pairs_size` setting, which has now been dropped.
  Relevant tracker: https://tracker.ceph.com/issues/55725


