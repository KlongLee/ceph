#!/usr/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3


# Removes the "# Please enter the commit message..." help message.
# /usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

if [[ -z "$COMMIT_SOURCE" ]]
then
  COMMIT_MSG_HEADERS="# Possible commit messages: "
  for FILE in $(git diff --cached --name-only -r)
  do
    # According to files changed the commit message would start "<project_name>: <commit_message>"
    # src/<project>/file.txt - "<project>:"
    # file.txt               - "file.txt:"
    # <project>/file.txt     - "<project>:" 
    COMMIT_MSG_HEADERS+="\n$(echo "# $FILE: <commit_message>" | sed -E 's|src/+||g' | sed -r 's/(.*)(\/[a-z0-9.-]+)/\1 /')" 
  done
  sed -i "1s;^;$COMMIT_MSG_HEADERS\n;" $COMMIT_MSG_FILE
fi


# Adds a Signed-off-by line to the message, that can still be edited (This is rarely a good idea).
SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
printf "\n$SOB" >> "$COMMIT_MSG_FILE"

# Adds a newline at the start of the message
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi
