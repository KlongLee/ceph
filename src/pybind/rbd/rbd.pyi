from typing import Dict, ContextManager, Optional, Iterator, Callable

import rados


RBD_FEATURE_LAYERING = ...  # type: int
RBD_FEATURE_STRIPINGV2 = ...  # type: int
RBD_FEATURE_EXCLUSIVE_LOCK = ...  # type: int
RBD_FEATURE_OBJECT_MAP = ...  # type: int
RBD_FEATURE_FAST_DIFF = ...  # type: int
RBD_FEATURE_DEEP_FLATTEN = ...  # type: int
RBD_FEATURE_JOURNALING = ...  # type: int
RBD_FEATURE_DATA_POOL = ...  # type: int
RBD_FEATURE_OPERATIONS = ...  # type: int

RBD_FEATURES_INCOMPATIBLE = ...  # type: int
RBD_FEATURES_RW_INCOMPATIBLE = ...  # type: int
RBD_FEATURES_MUTABLE = ...  # type: int
RBD_FEATURES_SINGLE_CLIENT = ...  # type: int
RBD_FEATURES_ALL = ...  # type: int

RBD_OPERATION_FEATURE_CLONE_PARENT = ...
RBD_OPERATION_FEATURE_CLONE_CHILD = ...
RBD_OPERATION_FEATURE_GROUP = ...
RBD_OPERATION_FEATURE_SNAP_TRASH = ...

RBD_FLAG_OBJECT_MAP_INVALID = ...
RBD_FLAG_FAST_DIFF_INVALID = ...

RBD_MIRROR_MODE_DISABLED = ...
RBD_MIRROR_MODE_IMAGE = ...
RBD_MIRROR_MODE_POOL = ...

RBD_MIRROR_IMAGE_DISABLING = ...
RBD_MIRROR_IMAGE_ENABLED = ...
RBD_MIRROR_IMAGE_DISABLED = ...

MIRROR_IMAGE_STATUS_STATE_UNKNOWN = ...
MIRROR_IMAGE_STATUS_STATE_ERROR = ...
MIRROR_IMAGE_STATUS_STATE_SYNCING = ...
MIRROR_IMAGE_STATUS_STATE_STARTING_REPLAY = ...
MIRROR_IMAGE_STATUS_STATE_REPLAYING = ...
MIRROR_IMAGE_STATUS_STATE_STOPPING_REPLAY = ...
MIRROR_IMAGE_STATUS_STATE_STOPPED = ...

RBD_LOCK_MODE_EXCLUSIVE = ...
RBD_LOCK_MODE_SHARED = ...

RBD_IMAGE_OPTION_FORMAT = ...
RBD_IMAGE_OPTION_FEATURES = ...
RBD_IMAGE_OPTION_ORDER = ...
RBD_IMAGE_OPTION_STRIPE_UNIT = ...
RBD_IMAGE_OPTION_STRIPE_COUNT = ...
RBD_IMAGE_OPTION_DATA_POOL = ...

RBD_SNAP_NAMESPACE_TYPE_USER = ...
RBD_SNAP_NAMESPACE_TYPE_GROUP = ...
RBD_SNAP_NAMESPACE_TYPE_TRASH = ...

RBD_GROUP_IMAGE_STATE_ATTACHED = ...
RBD_GROUP_IMAGE_STATE_INCOMPLETE = ...

RBD_GROUP_SNAP_STATE_INCOMPLETE = ...
RBD_GROUP_SNAP_STATE_COMPLETE = ...

RBD_IMAGE_MIGRATION_STATE_UNKNOWN = ...
RBD_IMAGE_MIGRATION_STATE_ERROR = ...
RBD_IMAGE_MIGRATION_STATE_PREPARING = ...
RBD_IMAGE_MIGRATION_STATE_PREPARED = ...
RBD_IMAGE_MIGRATION_STATE_EXECUTING = ...
RBD_IMAGE_MIGRATION_STATE_EXECUTED = ...

RBD_CONFIG_SOURCE_CONFIG = ...
RBD_CONFIG_SOURCE_POOL = ...
RBD_CONFIG_SOURCE_IMAGE = ...

RBD_POOL_STAT_OPTION_IMAGES = ...
RBD_POOL_STAT_OPTION_IMAGE_PROVISIONED_BYTES = ...
RBD_POOL_STAT_OPTION_IMAGE_MAX_PROVISIONED_BYTES = ...
RBD_POOL_STAT_OPTION_IMAGE_SNAPSHOTS = ...
RBD_POOL_STAT_OPTION_TRASH_IMAGES = ...
RBD_POOL_STAT_OPTION_TRASH_PROVISIONED_BYTES = ...
RBD_POOL_STAT_OPTION_TRASH_MAX_PROVISIONED_BYTES = ...
RBD_POOL_STAT_OPTION_TRASH_SNAPSHOTS = ...

class Error(Exception): pass

class OSError(Error):
    def __init__(self, message, errno=None):
        self.errno = errno

class PermissionError(OSError): pass
class ImageNotFound(OSError): pass
class ObjectNotFound(OSError): pass
class ImageExists(OSError): pass
class ObjectExists(OSError): pass
class IOError(OSError): pass
class NoSpace(OSError): pass
class IncompleteWriteError(OSError): pass
class InvalidArgument(OSError): pass
class LogicError(Error): pass
class ReadOnlyImage(OSError): pass
class ImageBusy(OSError): pass
class ImageHasSnapshots(OSError): pass
class FunctionNotSupported(OSError): pass
class ArgumentOutOfRange(OSError): pass
class ConnectionShutdown(OSError): pass
class Timeout(OSError): pass
class DiskQuotaExceeded(OSError): pass


errno_to_exception = ... # type: Dict[int, type]
group_errno_to_exception = ... # type: Dict[int, type]


def cstr(val, name, encoding="utf-8", opt=False) -> bytes: ...

def decode_cstr(val, encoding="utf-8") -> str: ...

RBD_MIRROR_PEER_ATTRIBUTE_NAME_MON_HOST = ...
RBD_MIRROR_PEER_ATTRIBUTE_NAME_KEY = ...


class Completion(object):
    def __init__(self, image, oncomplete):
        self.oncomplete = oncomplete
        self.image = image
        self.persisted = False

    def is_complete(self):...
    def wait_for_complete_and_cb(self):...
    def get_return_value(self):...

class RBD(object):
    def version(self):...
    def create(self, ioctx: rados.Ioctx, name:str, size:int, order:Optional[int]=None, old_format:bool=True,
               features:Optional[int]=None, stripe_unit:Optional[int]=None, stripe_count:Optional[int]=None,
               data_pool:Optional[str]=None):...
    def clone(self, p_ioctx:rados.Ioctx, p_name:str, p_snapname:str, c_ioctx:rados.Ioctx, c_name:str,
              features:Optional[int]=None, order:Optional[int]=None, stripe_unit:Optional[int]=None, stripe_count:Optional[int]=None,
              data_pool:Optional[str]=None):...
    def list(self, ioctx:rados.Ioctx):...
    def list2(self, ioctx:rados.Ioctx):...
    def remove(self, ioctx:rados.Ioctx, name: str, on_progress: Optional[Callable]):...
    def rename(self, ioctx:rados.Ioctx, src, dest):...
    def trash_move(self, ioctx:rados.Ioctx, name, delay=0):...
    def trash_purge(self, ioctx:rados.Ioctx, expire_ts=None, threshold=-1):...
    def trash_remove(self, ioctx:rados.Ioctx, image_id, force=False, on_progress: Optional[Callable]=None):...
    def trash_get(self, ioctx: rados.Ioctx,image_id):...
    def trash_list(self, ioctx: rados.Ioctx):...
    def trash_restore(self, ioctx: rados.Ioctx,image_id, name):...
    def migration_prepare(self, ioctx: rados.Ioctx, image_name, dest_ioctx: rados.Ioctx, dest_image_name,
                          features=None, order=None, stripe_unit=None, stripe_count=None,
                          data_pool=None):...
    def migration_execute(self, ioctx: rados.Ioctx, image_name, on_progress: Optional[Callable]=None):...
    def migration_commit(self, ioctx: rados.Ioctx, image_name, on_progress: Optional[Callable]=None):...
    def migration_abort(self, ioctx: rados.Ioctx, image_name, on_progress: Optional[Callable]=None):...
    def migration_status(self, ioctx: rados.Ioctx, image_name):...
    def mirror_mode_get(self, ioctx: rados.Ioctx):...
    def mirror_mode_set(self, ioctx: rados.Ioctx, mirror_mode):...
    def mirror_peer_add(self, ioctx: rados.Ioctx, cluster_name, client_name):...
    def mirror_peer_remove(self, ioctx: rados.Ioctx, uuid):...
    def mirror_peer_list(self, ioctx: rados.Ioctx):...
    def mirror_peer_set_client(self, ioctx: rados.Ioctx, uuid, client_name):...
    def mirror_peer_set_cluster(self, ioctx: rados.Ioctx, uuid, cluster_name):...
    def mirror_peer_get_attributes(self, ioctx: rados.Ioctx, uuid):...
    def mirror_peer_set_attributes(self, ioctx: rados.Ioctx, uuid, attributes):...
    def mirror_image_status_list(self, ioctx: rados.Ioctx):...
    def mirror_image_status_summary(self, ioctx: rados.Ioctx):...
    def mirror_image_instance_id_list(self, ioctx: rados.Ioctx):...
    def pool_metadata_get(self, ioctx: rados.Ioctx, key):...
    def pool_metadata_set(self, ioctx: rados.Ioctx, key, value):...
    def pool_metadata_remove(self, ioctx: rados.Ioctx, key):...
    def pool_metadata_list(self, ioctx: rados.Ioctx):...
    def config_list(self, ioctx: rados.Ioctx):...
    def group_create(self, ioctx: rados.Ioctx, name):...
    def group_remove(self, ioctx: rados.Ioctx, name):...
    def group_list(self, ioctx: rados.Ioctx):...
    def group_rename(self, ioctx: rados.Ioctx, src, dest):...
    def namespace_create(self, ioctx: rados.Ioctx, name):...
    def namespace_remove(self, ioctx: rados.Ioctx, name):...
    def namespace_exists(self, ioctx: rados.Ioctx, name):...
    def namespace_list(self, ioctx: rados.Ioctx):...
    def pool_init(self, ioctx: rados.Ioctx, force):...
    def pool_stats_get(self, ioctx: rados.Ioctx):...


class Group(ContextManager):
    def __init__(self, ioctx: rados.Ioctx, name):
        self.name = name

    def add_image(self, image_ioctx: rados.Ioctx, image_name):...
    def remove_image(self, image_ioctx: rados.Ioctx, image_name):...
    def list_images(self):...
    def create_snap(self, snap_name):...
    def remove_snap(self, snap_name):...
    def rename_snap(self, old_snap_name, new_snap_name):...
    def list_snaps(self):...
    def rollback_to_snap(self, name):...

class Image(ContextManager):
    def __init__(self, ioctx: rados.Ioctx, name=None, snapshot=None,
                 read_only=False, image_id=None):
        self.closed = True
        self.name = name

    def close(self):...
    def resize(self, size, allow_shrink=True):...
    def stat(self):...
    def get_name(self):...
    def id(self):...
    def block_name_prefix(self):...
    def data_pool_id(self):...
    def parent_info(self):...
    def parent_id(self):...
    def old_format(self):...
    def size(self):...
    def features(self):...
    def update_features(self, features, enabled):...
    def op_features(self):...
    def overlap(self):...
    def flags(self):...
    def group(self):...
    def is_exclusive_lock_owner(self):...
    def copy(self, dest_ioctx: rados.Ioctx, dest_name, features=None, order=None,
             stripe_unit=None, stripe_count=None, data_pool=None):...
    def deep_copy(self, dest_ioctx: rados.Ioctx, dest_name, features=None, order=None,
                  stripe_unit=None, stripe_count=None, data_pool=None):...
    def list_snaps(self):...
    def create_snap(self, name):...
    def rename_snap(self, srcname, dstname):...
    def remove_snap(self, name):...
    def remove_snap2(self, name, flags):...
    def remove_snap_by_id(self, snap_id):...
    def rollback_to_snap(self, name):...
    def protect_snap(self, name):...
    def unprotect_snap(self, name):...
    def is_protected_snap(self, name):...
    def get_snap_limit(self):...
    def set_snap_limit(self, limit):...
    def get_snap_timestamp(self, snap_id):...
    def remove_snap_limit(self):...
    def set_snap(self, name):...
    def set_snap_by_id(self, snap_id):...
    def read(self, offset, length, fadvise_flags=0):...
    def diff_iterate(self, offset, length, from_snapshot, iterate_cb,
                     include_parent = True, whole_object = False):...
    def write(self, data, offset, fadvise_flags=0):...
    def discard(self, offset, length):...
    def flush(self):...
    def invalidate_cache(self):...
    def stripe_unit(self):...
    def stripe_count(self):...
    def create_timestamp(self):...
    def access_timestamp(self):...
    def modify_timestamp(self):...
    def flatten(self):...
    def sparsify(self, sparse_size):...
    def rebuild_object_map(self):...
    def list_children(self):...
    def list_children2(self):...
    def list_descendants(self):...
    def list_lockers(self):...
    def lock_acquire(self, lock_mode):...
    def lock_release(self):...
    def lock_get_owners(self):...
    def lock_break(self, lock_mode, lock_owner):...
    def lock_exclusive(self, cookie):...
    def lock_shared(self, cookie, tag):...
    def unlock(self, cookie):...
    def break_lock(self, client, cookie):...
    def mirror_image_enable(self):...
    def mirror_image_disable(self, force):...
    def mirror_image_promote(self, force):...
    def mirror_image_demote(self):...
    def mirror_image_resync(self):...
    def mirror_image_get_info(self):...
    def mirror_image_get_status(self):...
    def mirror_image_get_instance_id(self):...
    def aio_read(self, offset, length, oncomplete, fadvise_flags=0):...
    def aio_write(self, data, offset, oncomplete, fadvise_flags=0):...
    def aio_discard(self, offset, length, oncomplete):...
    def aio_flush(self, oncomplete):...
    def metadata_get(self, key):...
    def metadata_set(self, key, value):...
    def metadata_remove(self, key):...
    def metadata_list(self):...
    def watchers_list(self):...
    def config_list(self):...
    def snap_get_namespace_type(self, snap_id):...
    def snap_get_group_namespace(self, snap_id):...
    def snap_get_trash_namespace(self, snap_id):...
