from collections import namedtuple
from typing import Dict, List, Optional, Tuple
import rados


class Error(Exception): pass


class OSError(Error):
    def __init__(self, errno, strerror):
        self.errno = errno
        self.strerror = strerror

class PermissionError(OSError): pass
class ObjectNotFound(OSError): pass
class NoData(OSError): pass
class ObjectExists(OSError): pass
class IOError(OSError): pass
class NoSpace(OSError): pass
class InvalidValue(OSError): pass
class OperationNotSupported(OSError): pass
class LibCephFSStateError(Error): pass
class WouldBlock(OSError): pass
class OutOfRange(OSError): pass

errno_to_exception = ... # type: Dict[int, type]

class DirEntry(namedtuple('DirEntry',
               ['d_ino', 'd_off', 'd_reclen', 'd_type', 'd_name'])):
    DT_DIR = ...
    DT_REG = ...
    DT_LNK = ...
    def is_dir(self) -> bool:...
    def is_symbol_file(self) -> bool:...
    def is_file(self) -> bool:...

StatResult = namedtuple('StatResult',
                        ["st_dev", "st_ino", "st_mode", "st_nlink", "st_uid",
                         "st_gid", "st_rdev", "st_size", "st_blksize",
                         "st_blocks", "st_atime", "st_mtime", "st_ctime"])

class DirResult(object):
    pass

def cstr(val, name, encoding="utf-8", opt=False) -> bytes:...
def cstr_list(list_str, name, encoding="utf-8") -> List[bytes]:...
def decode_cstr(val, encoding="utf-8"):...

class LibCephFS(object):
    def require_state(self, *args):...
    def __init__(self, conf=None, conffile=None, auth_id=None, rados_inst:Optional[rados.Rados]=None):
        self.state = ...
    def create_with_rados(self, rados_inst:rados.Rados):...
    def create(self, conf=None, conffile=None, auth_id=None):...
    def conf_read_file(self, conffile=None):...
    def conf_parse_argv(self, argv):...
    def shutdown(self):...
    def __enter__(self):...
    def __exit__(self, type_, value, traceback):...
    def version(self) -> Tuple[int, int, int]:...
    def conf_get(self, option):...
    def conf_set(self, option, val):...
    def init(self):...
    def mount(self, mount_root=None, filesystem_name=None):...
    def unmount(self):...
    def abort_conn(self):...
    def get_instance_id(self):...
    def statfs(self, path):...
    def sync_fs(self):...
    def fsync(self, fd:int, syncdataonly:int):...
    def getcwd(self) -> str:...
    def chdir(self, path: str):...
    def opendir(self, path: str):...
    def readdir(self, dir_handler: DirResult):...
    def closedir(self, dir_handler: DirResult):...
    def mkdir(self, path: str, mode):...
    def chmod(self, path: str, mode):...
    def mkdirs(self, path: str, mode):...
    def rmdir(self, path: str):...
    def open(self, path: str, flags, mode=0) -> int:...
    def close(self, fd: int):...
    def read(self, fd: int, offset: int, l: int):...
    def write(self, fd: int, buf: bytes, offset: int):...
    def flock(self, fd: int, operation: int, owner: int):...
    def getxattr(self, path: str, name, size=255):...
    def setxattr(self, path: str, name, value, flags):...
    def stat(self, path: str):...
    def fstat(self, fd: int):...
    def symlink(self, existing: str, newname: str):...
    def link(self, existing: str, newname: str):...
    def readlink(self, path: str, size):...
    def unlink(self, path: str):...
    def rename(self, src: str, dst: str):...
    def mds_command(self, mds_spec, args, input_data):...
    def umask(self, mode):...