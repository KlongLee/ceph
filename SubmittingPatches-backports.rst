======================================
Submitting Patches to Ceph - backports
======================================

Most likely you're reading this because you intend to submit a GitHub pull
request ("PR") targeting one of the stable branches ("nautilus", etc.) at
https://github.com/ceph/ceph.

Before you open that PR, please read (at the very least) the following general
rules::

* all bugfixes and features should land in master first
* commits to stable branches should be cherry-picked from master
* cherry-picks must be done using ``git cherry-pick -x``
* if a commit cannot be cherry-picked from master, the commit message must explain why that was not possible
* the commit message generated by ``git cherry-pick -x`` must not be modified, except to add a "Conflicts" section
* the "Conflicts" section must mention all files where changes had to made manually (not just conflicts flagged by git)
* the "Conflicts" section should also describe the manual changes that were made
* if a change is to be backported to multiple stable branches, a tracker issue is needed

For more information on that last point, see :ref:`_tracker_workflow`.

.. contents::
   :depth: 3

.. _tracker_workflow:

Tracker workflow
----------------

Any change that is to be backported to multiple stable branches should have
a tracker issue associated with it. If there isn't one yet, open one at
https://tracker.ceph.com. This issue should be in the "Bug" or "Feature"
trackers of the relevant subproject under the "Ceph" parent project (or
in the "Ceph" project itself if none of the subprojects are a good fit).
The stable branches to which the master changes are to be cherry-picked should
be listed in the "Backport" field. For example::

    Backport: mimic, nautilus

Once the PR targeting master is open, add the PR number assigned by GitHub to
the tracker issue. For example, if the PR number is 99999::

    Pull request ID: 999999

If you do not have sufficient permissions to modify any field of the tracker
issue, just add a comment describing what changes you would like to make.
Someone with permissions will make the necessary modifications on your behalf.

Once the master PR has been merged, after checking that the change really needs
to be backported and the Backport field has been populated, make sure the
tracker issue's Status field gets changed to "Pending Backport".

For straightforward backports, that's all that you (as the developer of the fix)
need to do. Volunteers from the :ref:`Stable Releases and Backports team` will
proceed to create Backport issues to track the necessary backports and stage the
backports by opening GitHub PRs with the cherry-picks. If you don't want to
wait, and provided you have sufficient permissions at https://tracker.ceph.com,
you can open the Backport tracker issues and stage the backport yourself. In
that case, read on.


Stable Releases and Backports team
----------------------------------

Ceph has a `Stable Releases and Backports`_ team, staffed by volunteers,
which is charged with maintaining the stable releases and backporting bugfixes
from the master branch to them. (That team maintains a wiki, accessible by
clicking the `Stable Releases and Backports`_ link, which describes various
workflows in the backporting lifecycle.)

.. _`Stable Releases and Backports`: http://tracker.ceph.com/projects/ceph-releases/wiki

Ordinarily, it is enough to fill out the "Backport" field in the bug (tracker
issue). The volunteers from the Stable Releases and Backports team will
backport the fix, run regression tests on it, and include it in one or more
future point releases.


Creating Backport tracker issues
--------------------------------

Before we can start, the master tracker issue needs to exist and be in the right
state. First, the master issue's Backport field should be populated. For example::

    Backport: mimic, nautilus

Second, the master PR should be in the "Pull request ID" field, e.g.::

    Pull request ID: 99999

Third, the master PR needs to have been merged already.

Fourth, the master tracker issue's status should be set to "Pending Backport"::

    Status: Pending Backport

Once all of the above has been completed, issues can be created in the Backport
tracker for tracking the backporting work. In our example, above, two issues
would be created, to track the backports to "mimic" and "nautilus",
respectively.

You might be tempted to forge ahead and create those issues yourself. Please
don't do that - it is difficult (bordering on impossible) to get it right when
creating them manually, and why go that route when there is a script that gets
it right every time? Setting up the script requires a small up-front time
investment. Once that is done, creating backport issues becomes trivial.


The backport-create-issue script
--------------------------------

The script used to create backport issues is located at
``src/script/backport-create-issue`` in the master branch. Though there might be
an older version of this script in a stable branch, do not use it. Only use the
most recent version from master.

Once you have the script somewhere in your PATH, you can proceed to install the
dependencies.

The dependencies are:

* python3
* python-redmine

Python 3 should already be present on any recent Linux installation. The second
dependency, python-redmine, can be obtained from PyPi::

    https://pypi.org/project/python-redmine/

Once you have the script in your PATH and the dependencies are installed, try to
run the script::

    backport-create-issue --help

This should produce a usage message.

Finally, run the script to actually create the Backport issues::

    backport-create-issue --user ... --password ... 99999

The script needs to know your https://tracker.ceph.com credentials in order to
authenticate to Redmine. In lieu of providing your literal username and password
on the command line, you could also obtain a REST API key ("My account" -> "API
access key") and run the script like so::

    backport-create-issue --key ... 99999


.. _cherry_picking_rules:

Cherry-picking rules
--------------------

The following rules apply::

* all bugfixes and features should land in master first
* commits to stable branches should be cherry-picked from master
* cherry-picks must be done using ``git cherry-pick -x``
* if a commit cannot be cherry-picked from master, the commit message must explain why that was not possible
* the commit message generated by ``git cherry-pick -x`` must not be modified, except to add a "Conflicts" section
* the "Conflicts" section must mention all files where changes had to made manually (not just conflicts flagged by git)
* the "Conflicts" section should also describe the manual changes that were made
* if a change is to be backported to multiple stable branches, a tracker issue is needed

All changes should land in master first. If a fix is merged directly to a stable
branch, it's possible that the bug will still be present in more recent
branches, including "master". When making a fix, it's important to examine not
just "master", but also all the active stable branches to determine which
branches have the bug.

Of course, it's possible that a bug is only present in stable branches, but not
in master. In that case there are two possibilities: either the bug was fixed by
one or more commits in master, or the relevant code in master got refactored,
but the refactoring itself is not a candidate for backport.

In the former case, just create a master tracker issue citing the PR or commits
that need to be cherry-picked, populate the Backport field, and proceed as with
any other backport.

In the latter case (master code was refactored), implement the fix in the most
recent stable branch that has the bug, and cherry-pick it from there to the
older stable branches. In each commit, include a brief statement explaining why
the change cannot be cherry-picked from master. For example::

    This commit cannot be cherry-picked from master because the 
    code in src/foo/bar.cc was refactored post-nautilus.

The ceph-backport.sh script
---------------------------

Similar to the case of creating the Backport tracker issues, staging the actual
backport PR and updating the Backport tracker issue is difficult - if not
impossible - to get right if you're doing it manually, and quickly becomes
tedious if you do it more than once in a long while.

After having spent a lot of time and effort developing a fix and getting it
merged into master, it wouldn't be surprising if you wanted to get it backported
to the stable branches with as little fuss as possible. If that's the case,
you're in luck! There is a script that automates the entire process of
cherry-picking the commits from the master PR, opening the GitHub backport PR,
and cross-linking the GitHub backport PR with the correct Backport tracker
issue. The script can also be used to good effect if you prefer to prepare the
backport branch yourself.

The script used to create backport issues is located at
``src/script/ceph-backport.sh`` in the master branch. Though there might be
an older version of this script in a stable branch, do not use it. Only use the
most recent version from master.

This is just a bash script, so the only dependency is ``bash`` itself, but it
does need to be run in the top level of a local clone of ``ceph/ceph.git``.
A small up-front time investment is required to get the script working in your
environment. This is because the script needs to autenticate itself (i.e., as
you) in order to use the GitHub and Redmine REST API services.

The script is self-documenting. Just run the script and proceed from there.

Once the script has been set up properly, you can validate the setup like so::

    ceph-backport.sh --setup

Once you have this saying "Overall setup is OK", you have two options for
staging the backport: either leave everything to the script, or prepare the
backport branch yourself and use the script only for creating the PR and
updating the Backport tracker issue.

If you prefer to leave everything to the script, just provide the Backport
tracker issue number to the script::

    ceph-backport.sh 55555

The script will start by creating the backport branch in your local git clone.
Even if you prefer to prepare the backport branch yourself, it must be named
``wip-$BACKPORT_ISSUE_NUMBER-$STABLE_BRANCH`` for the script to work, and it's
a good idea to use this branch naming convention for all your backporting work.
For example, if the Backport tracker issue number is 55555 and it's targeting
the stable branch "nautilus", the backport branch would be named::

    wip-55555-nautilus

If you prefer to create the backport branch yourself, just do that. Be sure to
name the backport branch as described above. Then, run the script::

    ceph-backport.sh 55555

The script will see that the backport branch already exists, and use it.


.. _conflict_resolution:

Conflict resolution
-------------------

If git reports conflicts, the script will abort to allow you to resolve the
conflicts manually.

Once the conflicts are resolved, complete the cherry-pick ::

    git cherry-pick --continue

Git will present a draft commit message with a "Conflicts" section.

Unfortunately, in recent versions of git, the Conflicts section is commented
out. Since the Conflicts section is mandatory for Ceph backports that do not
apply cleanly, you will need to uncomment the entire "Conflicts" section
of the commit message before committing the cherry-pick. You can also 
include commentary on what the conflicts were and how you resolved
them. For example::

    Conflicts:
            src/foo/bar.cc
    - mimic does not have blatz; use batlo instead

When editing the cherry-pick commit message, leave everything before the
"cherry picked from" line unchanged. Any edits you make should be in the part
following that line.  Here is an example::

    osd: check batlo before setting blatz

    Setting blatz requires special precautions. Check batlo first.
    
    Fixes: https://tracker.ceph.com/issues/99999
    Signed-off-by: Random J Developer <random@developer.example.com>
    (cherry picked from commit 01d73020da12f40ccd95ea1e49cfcf663f1a3a75)
    
    Conflicts:
    	src/osd/batlo.cc
    - add_batlo_check has an extra arg in newer code

Naturally, the ``Fixes`` line points to the master issue. You might be tempted
to modify it so it points to the backport issue, but - please - don't do that.
First, the master issue points to all the backport issues, and second, *any*
editing of the original commit message calls the entire backport into doubt,
simply because there is no good reason for such editing.

The part below the ``(cherry picked from commit ...)`` line is fair game for
editing. If you need to add additional information to the cherry-pick commit
message, append that information below this line. Once again: do not modify the
original commit message.

