#!/bin/sh

# copy-paste from doc/releases/releases.yml:releases
# FIXME: do it automatically
CEPH_RELEASES[0]=dumpling
CEPH_RELEASES[1]=emperor
CEPH_RELEASES[2]=firefly
CEPH_RELEASES[3]=giant
CEPH_RELEASES[4]=hammer
CEPH_RELEASES[5]=infernalis
CEPH_RELEASES[6]=jewel
CEPH_RELEASES[8]=kraken
CEPH_RELEASES[9]=luminous
CEPH_RELEASES[10]=mimic

if [ "$#" -ne 1 ]; then
    echo "$0: make cherry-pick to all release branches to update the docs globally"
    echo "WARNING: DO NOT use this scritp if you do not understand what it does"
    echo "USAGE: admin/admin/apply-to-all-docs '<commit>'"
    exit -1
fi

COMMIT=$1

# Don't enable -e until after running all the potentially-erroring checks
# for availability of commands
set -e
set -x

##### Idea:
# After cherry-pick there can be merge-conflicts, which developer should resolve
# Script create branch TGT_BRANCH=<CEPH_RELEASE>-<COMMIT> from <CEPH_RELEASE> branch,
# and try apply cherry pick on TGT_BRANCH
#
# if TGT_BRANCH exists the script considers the conflict as resolved
#
# After all TGT_BRANCH have been resolved, script merges from TGT_BRANCH
# and remove it
#####

for i in "${CEPH_RELEASES[@]}"
do
    TGT_BRANCH="$i-$COMMIT"

    if [ `git branch | grep -E "^[[:space:]]+${TGT_BRANCH}$"` ]; then
        continue;
    fi

    git checkout "$i"
    git checkout -b "${TGT_BRANCH}"

    # Here error are expected due merge-conflicts
    set +e
    git cherry-pick $COMMIT
    CHERRY_PICK_RESULT=$?

    if [ "${CHERRY_PICK_RESULT}" -ne 0 ]; then
        read -p "WARNING: cherry-pick has failed (Continue?)\n"\
                "(Press ^C to exit and resolve manually)"
    fi
    set -e

    # NOTE: here you can write the auto-resolving actions if it is possible
    # echo "please shell, resolve all automatically"
    # git cherry-pick --continue
done

for i in "${CEPH_RELEASES[@]}"
do
    TGT_BRANCH="$i-$COMMIT"

    git checkout "$i"
    git merge "${TGT_BRANCH}"
    git branch -d "${TGT_BRANCH}"
done

git checkout master
echo "All cherry-picks have been sucessfully resolved"
